var a=`:host
{
    --border-color: rgb(95, 95, 95);
    border: solid 1px var(--border-color);
    border-radius: 3px;
    padding: 0;
    margin: .25em;
    display: inline-flex;
}
@media (prefers-color-scheme: dark) 
{
    :host
    {
        --border-color: rgb(71, 71, 71);
    }
}

[part="color-container"]
{
    display: contents;
}

[part="color"]
{
    margin: 0;
    padding: 0;
    width: 7.5px;
    min-height: 0;
    height: auto;
    border: none;
}
[part="color"]::-moz-color-swatch 
{
    border: none;
    padding: 0;
    margin: 0;
}

[part="color"]::-webkit-color-swatch-wrapper 
{
    padding: 0;
    margin: 0;
}

[part="color"]::-webkit-color-swatch 
{
    border: none;
    padding: 0;
    margin: 0;
}

[part="is-finished"]
{
    margin: 1em .5em;
}

[part="finished-indicator"]
{
    margin-block: .5em;
}


[part="is-finished"]:checked ~ slot [part="description"]
,[part="is-finished"]:checked ~ ::slotted([slot="description"])
{
    text-decoration: line-through;
}

::slotted([slot="custom-check"])
{
    display: none;
}
[part="is-finished"]:checked ~ [part="finished-indicator"]
{
    background: var(--finished-background);
    background-color: var(--finished-background-color, transparent);
    background-image: var(--finished-background-image, none);
    border: var(--finished-border, none);
    color: var(--finished-color);
}
[part="is-finished"]:checked ~ [part="finished-indicator"] ::slotted([slot="custom-check"])
{
    display: var(--custom-check-display, block);
}

[part="description"]
{
    /* user-agent input defaults */
    --input-border-color: rgb(118, 118, 118);

    min-height: 1.2em;
    min-width: 24px;
    resize: both;
    background-color: field;
    color: fieldtext;
    border: solid 1px var(--input-border-color, fieldtext);
    padding: 3px 15px 3px 5px;
    font-size: 12px;
    font-family: sans-serif;
    display: block;
    border-radius: 2px;
    overflow: auto;
    overflow-wrap: normal;

}
@media (prefers-color-scheme: dark) 
{
    :host
    {
        /* user-agent input defaults */
        --input-border-color: rgb(133, 133, 133);
    }
}

[part="description"]
,::slotted([slot="description"])
{
    margin: 1em .5em 1em 0;
    flex: 1;
}

[part="remove-button"]
{
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin:1em .5em 1em 0;
}
[part="remove-icon"]
{
    width: var(--icon-width, var(--icon-size, 12px));
    height: var(--icon-height, var(--icon-size, 12px));
}


:host(.stacked)
{
    display: grid;
    grid-template-columns: auto auto 1fr auto;
    grid-template-rows: auto 1fr;
}

:host(.stacked) [part="color-container"]
,:host(.stacked) [part="color"]
{
    grid-row: 2;
    grid-column: 2;
    width: 14px;
    height: 14px;
    margin-block-end: 7px;
    margin-block-start: 0;
    border-radius: 3px;
    align-self: center;
    justify-self: center;
}

:host(.stacked) [part="handle"]
{
    grid-row: span 2;
    grid-column: 1;
}

:host(.stacked) [part="is-finished"]
,:host(.stacked) [part="finished-indicator"]
{
    grid-row: 1;
    grid-column: 2;
    margin-block-start: 7px;
    margin-block-end: 0;
}

:host(.stacked) [part="description"]
,:host(.stacked) [part="remove-button"]
{
    grid-row: span 2;
}`;var l=`<slot name="handle">
    <span part="handle"></span>
</slot>
<label part="color-container">
    <input type="color" part="color" value="#919191" />
</label>
<input type="checkbox" part="is-finished" title="Finished?" id="finished-checkbox" />
<label part="finished-indicator" for="finished-checkbox"><slot name="custom-check"></slot></label>
<slot name="description"><div part="description" contenteditable="true"></div></slot>
<button type="button" part="remove-button" title="Delete">
    <slot name="remove-button-label">
        <svg part="remove-icon" class="icon close-cross" viewBox="0 0 22.812714 22.814663" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg">
            <path
            style="display:inline;fill:var(--icon-primary-color,InfoText);fill-opacity:1;stroke:var(--icon-secondary-color,InfoBackground);stroke-width:1;stroke-linecap:round;stroke-dasharray:none;stroke-opacity:1"
            d="m 3.8656768,2.2287478 a 1.6392814,1.6392814 0 0 0 -1.15929,0.48032 1.6392814,1.6392814 0 0 0 0,2.31816 l 6.38181,6.3818002 -6.38181,6.38182 a 1.6392814,1.6392814 0 0 0 0,2.31814 1.6392814,1.6392814 0 0 0 2.31816,0 l 6.3818102,-6.3818 6.38181,6.3818 a 1.6392814,1.6392814 0 0 0 2.31816,0 1.6392814,1.6392814 0 0 0 0,-2.31814 l -6.38182,-6.38182 6.38182,-6.3818002 a 1.6392814,1.6392814 0 0 0 0,-2.31816 1.6392814,1.6392814 0 0 0 -1.15929,-0.48032 1.6392814,1.6392814 0 0 0 -1.15887,0.48032 l -6.38181,6.38181 -6.3818102,-6.38181 a 1.6392814,1.6392814 0 0 0 -1.15887,-0.48032 z" />
        </svg>
    </slot>
</button>`;var u=(t=>(t.Change="change",t.Remove="remove",t))(u||{}),m=(r=>(r.Handle="handle",r.ColorLabel="color-label",r.Color="color",r.IsFinished="is-finished",r.Description="description",r.RemoveButton="remove-button",r.RemoveIcon="remove-icon",r))(m||{}),d=new CSSStyleSheet;d.replaceSync(a);var i="task-card",n=class extends HTMLElement{componentParts=new Map;getPart(e){if(this.componentParts.get(e)==null){let t=this.shadowRoot.querySelector(`[part="${e}"]`);t!=null&&this.componentParts.set(e,t)}return this.componentParts.get(e)}findPart(e){return this.shadowRoot.querySelector(`[part="${e}"]`)}get value(){return this.findPart("description").textContent}#e=null;constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=l,this.shadowRoot.adoptedStyleSheets.push(d),this.findPart("color").addEventListener("change",e=>{this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,detail:{target:e.target}}))}),this.findPart("is-finished").addEventListener("change",e=>{this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,detail:{target:e.target}}))}),this.findPart("description").addEventListener("blur",e=>{this.value!=this.#e&&this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,detail:{target:e.target}})),this.#e=this.value}),this.findPart("remove-button").addEventListener("click",()=>{this.dispatchEvent(new CustomEvent("remove",{bubbles:!0,cancelable:!0}))})}static create(e){let t=document.createElement(i);if(e==null)return t;for(let[o,s]of Object.entries(e))if(o=="value"||o=="placeholder"||o=="color")t.setAttribute(o,s);else if(o.startsWith("on")){let c=o.substring(2).toLowerCase();t.addEventListener(c,s)}return t}static observedAttributes=["value","description","color","is-finished"];attributeChangedCallback(e,t,o){e=="value"||e=="description"?this.findPart("description").textContent=o:e=="is-finished"?this.findPart("is-finished").checked=o=="true":e=="color"&&(this.findPart("color").value=o)}};customElements.get(i)==null&&customElements.define(i,n);export{i as COMPONENT_TAG_NAME,n as TaskCardElement,u as TaskCardEvent,m as TaskCardPart};
